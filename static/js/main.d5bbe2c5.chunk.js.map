{"version":3,"sources":["reportWebVitals.js","app/utils/validator.js","app/components/common/form/textField.jsx","app/components/common/form/selectField.jsx","app/components/common/form/radio.Field.jsx","app/components/common/form/multiSelectField.jsx","app/components/common/backButton.jsx","app/services/http.service.js","app/services/qaulity.service.js","app/store/qualities.js","app/services/profession.service.js","app/store/professions.js","app/services/localStorageService.js","app/services/auth.service.js","app/services/user.service.js","app/utils/generateAuthError.js","app/utils/getRandomInt.js","app/utils/history.js","app/store/users.js","app/components/page/editUserPage/index.js","app/components/page/editUserPage/editUserPage.jsx","app/components/ui/userCard.jsx","app/components/ui/qualities/quality.jsx","app/components/ui/qualities/index.js","app/components/ui/qualities/qualitiesList.jsx","app/components/ui/qualitiesCard.jsx","app/components/ui/meetingsCard.jsx","app/utils/displayDate.js","app/components/common/comments/comment.jsx","app/components/common/comments/commentsList.jsx","app/components/common/form/textAreaField.jsx","app/components/common/comments/addCommentForm.jsx","app/components/common/comments/index.js","app/services/comment.service.js","app/store/comments.js","app/components/ui/comments.jsx","app/components/page/userPage/index.js","app/components/page/userPage/userPage.jsx","app/components/common/pagination.jsx","app/components/common/groupList.jsx","app/components/ui/searchStatus.jsx","app/components/common/bookmark.jsx","app/components/common/table/tableBody.jsx","app/components/common/table/tableHeader.jsx","app/components/common/table/index.js","app/components/common/table/table.jsx","app/components/ui/profession.jsx","app/components/ui/usersTable.jsx","app/components/page/usersListPage/index.js","app/components/page/usersListPage/usersListPage.jsx","app/utils/paginate.js","app/components/ui/hoc/usersLoader.jsx","app/layouts/users.jsx","app/components/common/form/checkBoxField.jsx","app/components/ui/loginForm.jsx","app/components/ui/registerForm.jsx","app/layouts/login.jsx","app/layouts/main.jsx","app/components/ui/navProfile.jsx","app/components/ui/navBar.jsx","app/components/common/protectedRoute.jsx","app/layouts/logOut.jsx","app/components/ui/hoc/appLoader.jsx","app/App.js","app/store/createStore.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","validator","data","config","errors","validate","validateMethod","statusValidate","trim","test","length","value","message","fieldName","error","TextField","label","type","name","onChange","useState","showPassword","setShowPassword","className","htmlFor","id","target","onClick","prevState","defaultProps","SelectField","defaultOption","options","optionsArray","Array","isArray","Object","keys","map","optionName","_id","disabled","option","RadioField","handleChange","checked","MultiSelectField","defaultValue","isMulti","closeMenuOnSelect","classNamePrefix","BackHistoryButton","history","useHistory","goBack","http","axios","create","baseURL","configFile","apiEndpoint","interceptors","request","use","isFirebase","containSlash","url","slice","Promise","reject","response","res","content","key","status","console","log","httpService","get","post","put","delete","qualityService","fetchAll","a","qualitiesSlice","createSlice","initialState","entities","isLoading","lastFetch","reducers","qualitiesRequested","state","qualitiesReceved","action","payload","Date","now","qualitiesRequestedField","actions","qualitiesReducer","reducer","loadQualitiesList","dispatch","getState","qualities","date","professionService","req","professionsSlice","professionsRequested","professionsReceved","professionsRequestedField","professionsReducer","loadProfessionsList","professions","TOKEN_KEY","REFRESH_TOKEN","EXPIRES_KEY","USERID_KEY","localStorageService","setTokens","refreshToken","idToken","localId","expiresIn","expiresData","getTime","localStorage","setItem","getAccessToken","getItem","getRefreshToken","getTokenExpiresData","getUserId","removeAuthData","removeItem","httpAuth","params","authService","register","email","password","returnSecureToken","login","refresh","grant_type","refresh_token","userEndpoint","userService","getCurrentUser","update","generateAuthError","getRandomInt","min","max","Math","floor","random","createBrowserHistory","auth","userId","isLoggedIn","dataLoaded","usersSlice","usersRequested","usersReceved","usersRequestedFalid","authRequestSuccess","authRequestFailed","userCreated","push","userLoggedOut","userUpdated","findIndex","u","authRequested","usersReducer","createAction","userCreateRequested","createUserFailed","userUpdateRequested","updateUserFailed","createUser","loadUsersList","getUserById","users","find","EditUserPage","useDispatch","setIsLoading","setData","currentUser","useSelector","qualitiesLoading","professionLoading","qualitiesList","q","professionsList","p","setErrors","transformData","qualitiesIds","qualitiesArray","qualId","quality","getQualitiesListByIds","qual","useEffect","validatorConfog","isRequired","isEmail","isValid","onSubmit","e","preventDefault","updateUserData","profession","sex","UserCard","user","currentUserId","location","pathname","src","image","width","role","rate","Quality","color","Qualities","qualitiesByIds","QualitiesCard","MeetingsCard","displayDate","parseInt","dateNow","getFullYear","getDay","getHours","minutesDif","getMinutes","toLocaleString","month","getMonth","getDate","Comment","created","created_at","onRemove","alt","height","CommentsList","comments","comment","TextAreaField","AddCommentForm","commentEndpoint","commentService","createComment","getComments","pageId","orderBy","equalTo","removeComment","commentId","commentsSlice","commentsRequested","commentsReceved","commentsRequestedField","commentsCreateRequested","commentsCreated","commentsCreateField","commentsRemoveRequested","commentsRemoved","filter","c","commentsRemoveRequestedField","commentsReducer","Comments","useParams","loadCommentsList","sortedComments","nanoid","UserPage","completedMeetings","Pagination","itemsCount","pageSize","onPageChange","currentPage","pagesCount","ceil","pages","_","range","page","GroupList","items","valueProperty","contentProperty","onItemSelect","selectedItem","item","style","textAlign","SearchStatus","number","lastOne","Number","toString","indexOf","renderPhrase","BookMark","rest","TableBody","columns","renderContent","column","component","path","TableHeader","onSort","selectedSort","rendeSortArrow","currentPath","order","undefined","scope","Table","children","Profession","getProfessionById","UserTable","onToggleBookMark","to","textDecoration","bookmark","UsersListPage","setCurrentPage","searchQuery","setSearchQuery","selectedProf","setSelectedProf","sortBy","setSortBy","filteredUsers","toLowerCase","JSON","stringify","count","usersCrop","pageNumber","startIndex","take","paginate","placeholder","newArray","pageIndex","UsersLoader","dataStatus","propTypes","PropTypes","oneOfType","arrayOf","node","Users","edit","CheckBoxField","LoginForm","stayOn","loginError","redirect","from","code","errorMessage","RegisterForm","licence","professionList","isCapitalSymbol","isContainDigit","newData","substring","signUp","Login","formType","setFormType","toggleFormType","borderRadius","Main","NavProfile","isOpen","setOpen","prev","position","right","NavBar","aria-current","ProtectedRoute","Component","render","props","LogOut","AppLoader","usersStatusLoading","App","exact","rootReducer","combineReducers","createStore","store","configureStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5bbe2c5.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","export function validator(data, config) {\n    const errors = {};\n    function validate(validateMethod, data, config) {\n        let statusValidate;\n        switch (validateMethod) {\n            case \"isRequired\": {\n                if (typeof data === \"boolean\") {\n                    statusValidate = !data;\n                } else {\n                    statusValidate = data.trim() === \"\";\n                }\n                break;\n            }\n            case \"isEmail\": {\n                const emailRegExp = /^\\S+@\\S+\\.\\S+$/g;\n                statusValidate = !emailRegExp.test(data);\n                break;\n            }\n            case \"isCapitalSymbol\": {\n                const capitalRegExp = /[A-Z]+/g;\n                statusValidate = !capitalRegExp.test(data);\n                break;\n            }\n            case \"isContainDigit\": {\n                const digitRegExp = /\\d+/g;\n                statusValidate = !digitRegExp.test(data);\n                break;\n            }\n            case \"min\": {\n                statusValidate = data.length < config.value;\n                break;\n            }\n            default:\n                break;\n        }\n        if (statusValidate) return config.message;\n    }\n    for (const fieldName in data) {\n        for (const validateMethod in config[fieldName]) {\n            const error = validate(\n                validateMethod,\n                data[fieldName],\n                config[fieldName][validateMethod]\n            );\n            if (error && !errors[fieldName]) {\n                errors[fieldName] = error;\n            }\n        }\n    }\n    return errors;\n}\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TextField = ({ label, type, name, value, onChange, error }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\n    };\n    const toggleShowPassword = () => {\n        setShowPassword((prevState) => !prevState);\n    };\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name}> {label}</label>\n            <div className=\"input-group has-validation\">\n                <input\n                    type={showPassword ? \"text\" : type}\n                    id={name}\n                    name={name}\n                    value={value}\n                    onChange={handleChange}\n                    className={getInputClasses()}\n                />\n\n                {type === \"password\" && (\n                    <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        onClick={toggleShowPassword}\n                    >\n                        <i\n                            className={\n                                \"bi bi-eye\" + (showPassword ? \"-slash\" : \"\")\n                            }\n                        ></i>\n                    </button>\n                )}\n                {error && <div className=\"invalid-feedback \">{error}</div>}\n            </div>\n        </div>\n    );\n};\nTextField.defaultProps = {\n    type: \"text\"\n};\nTextField.propTypes = {\n    label: PropTypes.string,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string\n};\n\nexport default TextField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SelectField = ({\n    label,\n    value,\n    onChange,\n    defaultOption,\n    options,\n    error,\n    name\n}) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-select\" + (error ? \" is-invalid\" : \"\");\n    };\n\n    const optionsArray =\n        !Array.isArray(options) && typeof options === \"object\"\n            ? Object.keys(options).map((optionName) => ({\n                  name: options[optionName].name,\n                  value: options[optionName]._id\n              }))\n            : options;\n\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor=\"validationCustom04\" className=\"form-label\">\n                {label}\n            </label>\n            <select\n                className={getInputClasses()}\n                id=\"validationCustom04\"\n                name={name}\n                value={value}\n                onChange={handleChange}\n            >\n                <option disabled value=\"\">\n                    {defaultOption}\n                </option>\n                {optionsArray &&\n                    optionsArray.map((option) => (\n                        <option value={option.value} key={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n            </select>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\nSelectField.propTypes = {\n    defaultOption: PropTypes.string,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string,\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    name: PropTypes.string\n};\n\nexport default SelectField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst RadioField = ({ options, name, onChange, value, label }) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    return (\n        <div className=\"mb-4\">\n            <label className=\"form-label\">{label}</label>\n            <div>\n                {options.map((option) => (\n                    <div\n                        key={option.name + \"_\" + option.value}\n                        className=\"form-check form-check-inline\"\n                    >\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name={name}\n                            id={option.name + \"_\" + option.value}\n                            checked={option.value === value}\n                            value={option.value}\n                            onChange={handleChange}\n                        />\n                        <label\n                            className=\"form-check-label\"\n                            htmlFor={option.name + \"_\" + option.value}\n                        >\n                            {option.name}\n                        </label>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nRadioField.propTypes = {\n    options: PropTypes.array,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.string,\n    label: PropTypes.string\n};\n\nexport default RadioField;\n","import React from \"react\";\nimport Select from \"react-select\";\nimport PropTypes from \"prop-types\";\n\nconst MultiSelectField = ({ options, onChange, name, label, defaultValue }) => {\n    const optionsArray =\n        !Array.isArray(options) && typeof options === \"object\"\n            ? Object.keys(options).map((optionName) => ({\n                  label: options[optionName].name,\n                  value: options[optionName]._id\n              }))\n            : options;\n\n    const handleChange = (value) => {\n        onChange({ name: name, value });\n    };\n    return (\n        <div className=\"mb-4\">\n            <label className=\"form-label\">{label}</label>\n            <Select\n                isMulti\n                closeMenuOnSelect={false}\n                defaultValue={defaultValue}\n                options={optionsArray}\n                className=\"basic-multi-select\"\n                classNamePrefix=\"select\"\n                onChange={handleChange}\n                name={name}\n            />\n        </div>\n    );\n};\nMultiSelectField.propTypes = {\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onChange: PropTypes.func,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    defaultValue: PropTypes.array\n};\n\nexport default MultiSelectField;\n","import React from \"react\";\nimport { useHistory } from \"react-router\";\nconst BackHistoryButton = () => {\n    const history = useHistory();\n    return (\n        <button className=\"btn btn-primary\" onClick={() => history.goBack()}>\n            <i className=\"bi bi-caret-left\"></i>\n            Назад\n        </button>\n    );\n};\n\nexport default BackHistoryButton;\n","import axios from \"axios\";\r\n// import { toast } from \"react-toastify\";\r\nimport configFile from \"../config.json\";\r\n// import authService from \"./auth.service\";\r\n// import localStorageService from \"./localStorageService\";\r\n\r\nconst http = axios.create({\r\n    baseURL: configFile.apiEndpoint\r\n});\r\n\r\nhttp.interceptors.request.use(\r\n    function (config) {\r\n        if (configFile.isFirebase) {\r\n            const containSlash = /\\/$/gi.test(config.url);\r\n            config.url =\r\n                (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\r\n            // const expiresData = localStorageService.getTokenExpiresData();\r\n            // const refreshToken = localStorageService.getRefreshToken();\r\n            // if (refreshToken && expiresData < Date.now()) {\r\n            // const data = await authService.refresh();\r\n            //     localStorageService.setTokens({\r\n            //         refreshToken: data.refresh_token,\r\n            //         idToken: data.id_token,\r\n            //         expiresIn: data.expires_in,\r\n            //         localId: data.user_id\r\n            //     });\r\n            // }\r\n            // const accessToken = localStorageService.getAccessToken();\r\n            // if (accessToken) {\r\n            //     config.params = { ...config.params, auth: accessToken };\r\n            // }\r\n        }\r\n        return config;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nfunction transformData(data) {\r\n    return data && !data._id\r\n        ? Object.keys(data).map((key) => ({\r\n              ...data[key]\r\n          }))\r\n        : data;\r\n}\r\n\r\nhttp.interceptors.response.use(\r\n    (res) => {\r\n        if (configFile.isFirebase) {\r\n            res.data = { content: transformData(res.data) };\r\n        }\r\n        return res;\r\n    },\r\n    function (error) {\r\n        const expectedErrors =\r\n            error.response &&\r\n            error.response.status >= 400 &&\r\n            error.response.status < 500;\r\n\r\n        if (!expectedErrors) {\r\n            console.log(error);\r\n            // toast.error(\"Somthing was wrong. Try it later\");\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\nconst httpService = {\r\n    get: http.get,\r\n    post: http.post,\r\n    put: http.put,\r\n    delete: http.delete\r\n};\r\nexport default httpService;\r\n","import httpService from \"./http.service\";\nconst qualityEndpoint = \"quality/\";\n\nconst qualityService = {\n    fetchAll: async () => {\n        const { data } = await httpService.get(qualityEndpoint);\n        return data;\n    }\n};\nexport default qualityService;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport qualityService from \"../services/qaulity.service\";\r\n\r\nconst qualitiesSlice = createSlice({\r\n    name: \"qualities\",\r\n    initialState: {\r\n        entities: null,\r\n        isLoading: true,\r\n        error: null,\r\n        lastFetch: null\r\n    },\r\n    reducers: {\r\n        qualitiesRequested(state) {\r\n            state.isLoading = true;\r\n        },\r\n        qualitiesReceved(state, action) {\r\n            state.entities = action.payload;\r\n            state.lastFetch = Date.now();\r\n            state.isLoading = false;\r\n        },\r\n        qualitiesRequestedField(state, action) {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\nconst { actions, reducer: qualitiesReducer } = qualitiesSlice;\r\nconst { qualitiesRequested, qualitiesReceved, qualitiesRequestedField } =\r\n    actions;\r\n\r\nfunction isQutdated(date) {\r\n    if (Date.now() - date > 10 * 60 * 1000) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const loadQualitiesList = () => async (dispatch, getState) => {\r\n    const { lastFetch } = getState().qualities;\r\n    if (isQutdated(lastFetch)) {\r\n        dispatch(qualitiesRequested());\r\n        try {\r\n            const { content } = await qualityService.fetchAll();\r\n            dispatch(qualitiesReceved(content));\r\n        } catch (error) {\r\n            dispatch(qualitiesRequestedField(error.message));\r\n        }\r\n    }\r\n};\r\n\r\nexport const getQualities = () => (state) => state.qualities.entities;\r\nexport const getQualitiesLoadingStatus = () => (state) =>\r\n    state.qualities.isLoading;\r\n\r\nexport const getQualitiesByIds = (qualitiesByIds) => (state) => {\r\n    if (state.qualities.entities) {\r\n        const qualitiesArray = [];\r\n        for (const qualId of qualitiesByIds) {\r\n            for (const quality of state.qualities.entities) {\r\n                if (quality._id === qualId) {\r\n                    qualitiesArray.push(quality);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return qualitiesArray;\r\n    }\r\n    return [];\r\n};\r\nexport default qualitiesReducer;\r\n","import httpService from \"./http.service\";\n\nconst professionEndpoint = \"profession/\";\n\nconst professionService = {\n    get: async () => {\n        const req = await httpService.get(professionEndpoint);\n        return req.data;\n    }\n};\nexport default professionService;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport professionService from \"../services/profession.service\";\r\n\r\nconst professionsSlice = createSlice({\r\n    name: \"professions\",\r\n    initialState: {\r\n        entities: null,\r\n        isLoading: true,\r\n        error: null,\r\n        lastFetch: null\r\n    },\r\n    reducers: {\r\n        professionsRequested(state) {\r\n            state.isLoading = true;\r\n        },\r\n        professionsReceved(state, action) {\r\n            state.entities = action.payload;\r\n            state.lastFetch = Date.now();\r\n            state.isLoading = false;\r\n        },\r\n        professionsRequestedField(state, action) {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\nconst { actions, reducer: professionsReducer } = professionsSlice;\r\nconst { professionsRequested, professionsReceved, professionsRequestedField } =\r\n    actions;\r\n\r\nfunction isProfdated(date) {\r\n    if (Date.now() - date > 10 * 60 * 1000) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const loadProfessionsList = () => async (dispatch, getState) => {\r\n    const { lastFetch } = getState().professions;\r\n    if (isProfdated(lastFetch)) {\r\n        dispatch(professionsRequested());\r\n        try {\r\n            const { content } = await professionService.get();\r\n            dispatch(professionsReceved(content));\r\n        } catch (error) {\r\n            dispatch(professionsRequestedField(error.message));\r\n        }\r\n    }\r\n};\r\n\r\nexport const getProfessions = () => (state) => state.professions.entities;\r\nexport const getProfessionsLoadingStatus = () => (state) =>\r\n    state.professions.isLoading;\r\n\r\nexport function getProfessionById(id) {\r\n    return (state) => {\r\n        return state.professions.entities.find((p) => p._id === id);\r\n    };\r\n}\r\n\r\nexport default professionsReducer;\r\n","const TOKEN_KEY = \"jwt_token\";\r\nconst REFRESH_TOKEN = \"jwt-refresh-token\";\r\nconst EXPIRES_KEY = \"jwt_expires\";\r\nconst USERID_KEY = \"user-local-id\";\r\n\r\nexport function setTokens({\r\n    refreshToken,\r\n    idToken,\r\n    localId,\r\n    expiresIn = 3600\r\n}) {\r\n    const expiresData = new Date().getTime() + expiresIn * 1000;\r\n    localStorage.setItem(USERID_KEY, localId);\r\n    localStorage.setItem(TOKEN_KEY, refreshToken);\r\n    localStorage.setItem(REFRESH_TOKEN, idToken);\r\n    localStorage.setItem(EXPIRES_KEY, expiresData);\r\n}\r\n\r\nexport function removeAuthData() {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(USERID_KEY);\r\n    localStorage.removeItem(REFRESH_TOKEN);\r\n    localStorage.removeItem(EXPIRES_KEY);\r\n}\r\n\r\nexport function getAccessToken() {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n}\r\n\r\nexport function getUserId() {\r\n    return localStorage.getItem(USERID_KEY);\r\n}\r\nexport function getRefreshToken() {\r\n    return localStorage.getItem(REFRESH_TOKEN);\r\n}\r\n\r\nexport function getTokenExpiresData() {\r\n    return localStorage.getItem(EXPIRES_KEY);\r\n}\r\n\r\nconst localStorageService = {\r\n    setTokens,\r\n    getAccessToken,\r\n    getRefreshToken,\r\n    getTokenExpiresData,\r\n    getUserId,\r\n    removeAuthData\r\n};\r\n\r\nexport default localStorageService;\r\n","import axios from \"axios\";\r\nimport localStorageService from \"./localStorageService\";\r\n\r\nconst httpAuth = axios.create({\r\n    baseURL: `https://identitytoolkit.googleapis.com/v1/`,\r\n    params: {\r\n        key: \"AIzaSyClG1I1CCUnIU4Bq_vxiGqpdNM00qlmMho\"\r\n    }\r\n});\r\n\r\nconst authService = {\r\n    register: async ({ email, password }) => {\r\n        const { data } = await httpAuth.post(`accounts:signUp`, {\r\n            email,\r\n            password,\r\n            returnSecureToken: true\r\n        });\r\n        return data;\r\n    },\r\n    login: async ({ email, password }) => {\r\n        const { data } = await httpAuth.post(`accounts:signInWithPassword`, {\r\n            email,\r\n            password,\r\n            returnSecureToken: true\r\n        });\r\n        return data;\r\n    },\r\n    refresh: async () => {\r\n        const { data } = await httpAuth.post(\"token\", {\r\n            grant_type: \"refresh_token\",\r\n            refresh_token: localStorageService.getRefreshToken()\r\n        });\r\n        return data;\r\n    }\r\n};\r\n\r\nexport default authService;\r\n","import httpService from \"./http.service\";\nimport localStorageService from \"./localStorageService\";\n\nconst userEndpoint = \"user/\";\n\nconst userService = {\n    get: async () => {\n        const { data } = await httpService.get(userEndpoint);\n        return data;\n    },\n    create: async (payload) => {\n        const { data } = await httpService.put(\n            userEndpoint + payload._id,\n            payload\n        );\n        return data;\n    },\n    getCurrentUser: async () => {\n        const { data } = await httpService.get(\n            userEndpoint + localStorageService.getUserId()\n        );\n        return data;\n    },\n    update: async (payload) => {\n        const { data } = await httpService.put(\n            userEndpoint + payload._id,\n            payload\n        );\n        return data;\n    }\n};\nexport default userService;\n","function generateAuthError(message) {\r\n    switch (message) {\r\n        case \"EMAIL_EXISTS\":\r\n            return \"Пользователь с таким Email уже существует\";\r\n        case \"INVALID_PASSWORD\":\r\n            return \"Email или пароль введены некорректно\";\r\n        default:\r\n            return \"Слишком много попыток входа. Попробуйте позднее\";\r\n    }\r\n}\r\n\r\nexport default generateAuthError;\r\n","function getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default getRandomInt;\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nconst history = createBrowserHistory();\r\nexport default history;\r\n","import { createAction, createSlice } from \"@reduxjs/toolkit\";\r\nimport authService from \"../services/auth.service\";\r\nimport localStorageService from \"../services/localStorageService\";\r\nimport userService from \"../services/user.service\";\r\nimport generateAuthError from \"../utils/generateAuthError\";\r\nimport getRandomInt from \"../utils/getRandomInt\";\r\nimport history from \"../utils/history\";\r\n\r\nconst initialState = localStorageService.getAccessToken()\r\n    ? {\r\n          entities: null,\r\n          isLoading: true,\r\n          error: null,\r\n          auth: { userId: localStorageService.getUserId() },\r\n          isLoggedIn: true,\r\n          dataLoaded: false\r\n      }\r\n    : {\r\n          entities: null,\r\n          isLoading: false,\r\n          error: null,\r\n          auth: null,\r\n          isLoggedIn: false,\r\n          dataLoaded: false\r\n      };\r\nconst usersSlice = createSlice({\r\n    name: \"users\",\r\n    initialState,\r\n    reducers: {\r\n        usersRequested: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        usersReceved: (state, action) => {\r\n            state.entities = action.payload;\r\n            state.dataLoaded = true;\r\n            state.isLoading = false;\r\n        },\r\n        usersRequestedFalid: (state, action) => {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        },\r\n        authRequestSuccess: (state, action) => {\r\n            state.auth = action.payload;\r\n            state.isLoggedIn = true;\r\n        },\r\n        authRequestFailed: (state, action) => {\r\n            state.error = action.payload;\r\n        },\r\n        userCreated: (state, action) => {\r\n            state.entities.push(action.payload);\r\n        },\r\n        userLoggedOut: (state) => {\r\n            state.entities = null;\r\n            state.isLoggedIn = false;\r\n            state.auth = null;\r\n            state.dataLoaded = false;\r\n        },\r\n        userUpdated: (state, action) => {\r\n            state.entities[\r\n                state.entities.findIndex((u) => u._id === action.payload._id)\r\n            ] = action.payload;\r\n        },\r\n        authRequested: (state) => {\r\n            state.error = null;\r\n        }\r\n    }\r\n});\r\n\r\nconst { actions, reducer: usersReducer } = usersSlice;\r\nconst {\r\n    usersRequested,\r\n    usersReceved,\r\n    usersRequestedFalid,\r\n    authRequestSuccess,\r\n    authRequestFailed,\r\n    userCreated,\r\n    userLoggedOut,\r\n    userUpdated\r\n} = actions;\r\n\r\nconst authRequested = createAction(\"users/authRequested\");\r\nconst userCreateRequested = createAction(\"users/userCreateRequested\");\r\nconst createUserFailed = createAction(\"users/createUserFailed\");\r\nconst userUpdateRequested = createAction(\"users/userUpdateRequested\");\r\nconst updateUserFailed = createAction(\"users/updateUserFailed\");\r\n\r\nexport const login =\r\n    ({ payload, redirect }) =>\r\n    async (dispatch) => {\r\n        const { email, password } = payload;\r\n        dispatch(authRequested());\r\n        try {\r\n            const data = await authService.login({ email, password });\r\n            dispatch(authRequestSuccess({ userId: data.localId }));\r\n            localStorageService.setTokens(data);\r\n            history.push(redirect);\r\n        } catch (error) {\r\n            const { code, message } = error.response.data.error;\r\n            if (code === 400) {\r\n                const errorMessage = generateAuthError(message);\r\n                dispatch(authRequestFailed(errorMessage));\r\n            } else {\r\n                dispatch(authRequestFailed(error.message));\r\n            }\r\n        }\r\n    };\r\n\r\nexport const signUp =\r\n    ({ email, password, ...rest }) =>\r\n    async (dispatch) => {\r\n        console.log(rest);\r\n        dispatch(authRequested());\r\n        try {\r\n            const data = await authService.register({ email, password });\r\n            localStorageService.setTokens(data);\r\n            dispatch(authRequestSuccess({ userId: data.localId }));\r\n            dispatch(\r\n                createUser({\r\n                    _id: data.localId,\r\n                    email,\r\n                    image: `https://avatars.dicebear.com/api/avataaars/${(\r\n                        Math.random() + 1\r\n                    )\r\n                        .toString(36)\r\n                        .substring(7)}.svg`,\r\n                    rate: getRandomInt(1, 5),\r\n                    completedMeetings: getRandomInt(0, 200),\r\n                    ...rest\r\n                })\r\n            );\r\n        } catch (error) {\r\n            dispatch(authRequestFailed(error.message));\r\n        }\r\n    };\r\n\r\nfunction createUser(data) {\r\n    return async function (dispatch) {\r\n        dispatch(userCreateRequested());\r\n        try {\r\n            const { content } = await userService.create(data);\r\n            dispatch(userCreated(content));\r\n            history.push(\"/users\");\r\n        } catch (error) {\r\n            dispatch(createUserFailed(error.message));\r\n        }\r\n    };\r\n}\r\n\r\nexport const updateUserData = (data) => async (dispatch) => {\r\n    dispatch(userUpdateRequested());\r\n    try {\r\n        const { content } = await userService.update(data);\r\n        dispatch(userUpdated(content));\r\n        history.push(`/users/${content._id}`);\r\n    } catch (error) {\r\n        dispatch(updateUserFailed(error.message));\r\n    }\r\n};\r\n\r\nexport const loadUsersList = () => async (dispatch) => {\r\n    dispatch(usersRequested());\r\n    try {\r\n        const { content } = await userService.get();\r\n        dispatch(usersReceved(content));\r\n    } catch (error) {\r\n        dispatch(usersRequestedFalid(error.message));\r\n    }\r\n};\r\nexport const logOut = () => (dispatch) => {\r\n    localStorageService.removeAuthData();\r\n    dispatch(userLoggedOut());\r\n    history.push(\"/\");\r\n};\r\nexport const getUsersList = () => (state) => state.users.entities;\r\nexport const getUsersLoadingStatus = () => (state) => state.users.isLoading;\r\nexport const getIsLoggedIn = () => (state) => state.users.isLoggedIn;\r\nexport const getCurrentUserData = () => (state) => {\r\n    return state.users.entities\r\n        ? state.users.entities.find((u) => u._id === state.users.auth.userId)\r\n        : null;\r\n};\r\nexport const getDataStatus = () => (state) => state.users.dataLoaded;\r\nexport const getCurrentUserId = () => (state) => state.users.auth.userId;\r\nexport const getUserById = (userId) => (state) => {\r\n    if (state.users.entities) {\r\n        return state.users.entities.find((u) => u._id === userId);\r\n    }\r\n};\r\nexport const getAuthErrors = () => (state) => state.users.error;\r\n\r\nexport default usersReducer;\r\n","import EditUserPage from \"./editUserPage\";\nexport default EditUserPage;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../../utils/validator\";\nimport TextField from \"../../common/form/textField\";\nimport SelectField from \"../../common/form/selectField\";\nimport RadioField from \"../../common/form/radio.Field\";\nimport MultiSelectField from \"../../common/form/multiSelectField\";\nimport BackHistoryButton from \"../../common/backButton\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    getQualities,\n    getQualitiesLoadingStatus\n} from \"../../../store/qualities\";\nimport {\n    getProfessions,\n    getProfessionsLoadingStatus\n} from \"../../../store/professions\";\nimport { getCurrentUserData, updateUserData } from \"../../../store/users\";\n\nconst EditUserPage = () => {\n    const dispatch = useDispatch();\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState();\n    const currentUser = useSelector(getCurrentUserData());\n    const qualities = useSelector(getQualities());\n    const professions = useSelector(getProfessions());\n    const qualitiesLoading = useSelector(getQualitiesLoadingStatus());\n    const professionLoading = useSelector(getProfessionsLoadingStatus());\n    const qualitiesList = qualities.map((q) => ({\n        label: q.name,\n        value: q._id\n    }));\n    const professionsList = professions.map((p) => ({\n        label: p.name,\n        value: p._id\n    }));\n\n    const [errors, setErrors] = useState({});\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        dispatch(\n            updateUserData({\n                ...data,\n                qualities: data.qualities.map((q) => q.value)\n            })\n        );\n    };\n    function getQualitiesListByIds(qualitiesIds) {\n        const qualitiesArray = [];\n        for (const qualId of qualitiesIds) {\n            for (const quality of qualities) {\n                if (quality._id === qualId) {\n                    qualitiesArray.push(quality);\n                    break;\n                }\n            }\n        }\n        return qualitiesArray;\n    }\n    const transformData = (data) => {\n        const result = getQualitiesListByIds(data).map((qual) => ({\n            label: qual.name,\n            value: qual._id\n        }));\n\n        return result;\n    };\n    useEffect(() => {\n        if (!professionLoading && !qualitiesLoading && currentUser && !data) {\n            setData({\n                ...currentUser,\n                qualities: transformData(currentUser.qualities)\n            });\n        }\n    }, [professionLoading, qualitiesLoading, currentUser, data]);\n    useEffect(() => {\n        if (data && isLoading) {\n            setIsLoading(false);\n        }\n    }, [data]);\n\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n\n        name: {\n            isRequired: {\n                message: \"Введите ваше имя\"\n            }\n        }\n    };\n    useEffect(() => validate(), [data]);\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n    return (\n        <div className=\"container mt-5\">\n            <BackHistoryButton />\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3 shadow p-4\">\n                    {!isLoading && Object.keys(professions).length > 0 ? (\n                        <form onSubmit={handleSubmit}>\n                            <TextField\n                                label=\"Имя\"\n                                name=\"name\"\n                                value={data.name}\n                                onChange={handleChange}\n                                error={errors.name}\n                            />\n                            <TextField\n                                label=\"Электронная почта\"\n                                name=\"email\"\n                                value={data.email}\n                                onChange={handleChange}\n                                error={errors.email}\n                            />\n                            <SelectField\n                                label=\"Выбери свою профессию\"\n                                defaultOption=\"Choose...\"\n                                name=\"profession\"\n                                options={professionsList}\n                                onChange={handleChange}\n                                value={data.profession}\n                                error={errors.profession}\n                            />\n                            <RadioField\n                                options={[\n                                    { name: \"Male\", value: \"male\" },\n                                    { name: \"Female\", value: \"female\" },\n                                    { name: \"Other\", value: \"other\" }\n                                ]}\n                                value={data.sex}\n                                name=\"sex\"\n                                onChange={handleChange}\n                                label=\"Выберите ваш пол\"\n                            />\n                            <MultiSelectField\n                                defaultValue={data.qualities}\n                                options={qualitiesList}\n                                onChange={handleChange}\n                                name=\"qualities\"\n                                label=\"Выберите ваши качесвта\"\n                            />\n                            <button\n                                type=\"submit\"\n                                disabled={!isValid}\n                                className=\"btn btn-primary w-100 mx-auto\"\n                            >\n                                Обновить\n                            </button>\n                        </form>\n                    ) : (\n                        \"Loading...\"\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EditUserPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useHistory } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport { getCurrentUserId } from \"../../store/users\";\n\nconst UserCard = ({ user }) => {\n    const history = useHistory();\n    const currentUserId = useSelector(getCurrentUserId());\n    const handleClick = () => {\n        history.push(history.location.pathname + \"/edit\");\n    };\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body\">\n                {currentUserId === user._id && (\n                    <button\n                        className=\"position-absolute top-0 end-0 btn btn-light btn-sm\"\n                        onClick={handleClick}\n                    >\n                        <i className=\"bi bi-gear\"></i>\n                    </button>\n                )}\n\n                <div className=\"d-flex flex-column align-items-center text-center position-relative\">\n                    <img\n                        src={user.image}\n                        className=\"rounded-circle\"\n                        width=\"150\"\n                    />\n                    <div className=\"mt-3\">\n                        <h4>{user.name}</h4>\n                        <p className=\"text-secondary mb-1\">\n                            {user.profession.name}\n                        </p>\n                        <div className=\"text-muted\">\n                            <i\n                                className=\"bi bi-caret-down-fill text-primary\"\n                                role=\"button\"\n                            ></i>\n                            <i\n                                className=\"bi bi-caret-up text-secondary\"\n                                role=\"button\"\n                            ></i>\n                            <span className=\"ms-2\">{user.rate}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nUserCard.propTypes = {\n    user: PropTypes.object\n};\n\nexport default UserCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Quality = ({ _id, color, name }) => {\n    return (\n        <span className={\"badge m-1 bg-\" + color} key={_id}>\n            {name}\n        </span>\n    );\n};\nQuality.propTypes = {\n    _id: PropTypes.string.isRequired,\n    color: PropTypes.string,\n    name: PropTypes.string\n};\n\nexport default Quality;\n","import Qualities from \"./qualitiesList\";\nexport default Qualities;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Quality from \"./quality\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    getQualitiesByIds,\n    getQualitiesLoadingStatus,\n    loadQualitiesList\n} from \"../../../store/qualities\";\n\nconst QualitiesList = ({ qualities }) => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getQualitiesLoadingStatus());\n    const qualitiesList = useSelector(getQualitiesByIds(qualities));\n\n    useEffect(() => {\n        dispatch(loadQualitiesList());\n    }, []);\n\n    if (isLoading) return \"Loadind ...\";\n\n    return (\n        <>\n            {qualitiesList.map((qual) => (\n                <Quality key={qual._id} {...qual} />\n            ))}\n        </>\n    );\n};\n\nQualitiesList.propTypes = {\n    qualities: PropTypes.array\n};\n\nexport default QualitiesList;\n","import React from \"react\";\nimport Qualities from \"./qualities\";\nimport PropTypes from \"prop-types\";\n\nconst QualitiesCard = ({ data }) => {\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\n                <h5 className=\"card-title\">\n                    <span>Qualities</span>\n                </h5>\n                <p className=\"card-text\">\n                    <Qualities qualities={data} />\n                </p>\n            </div>\n        </div>\n    );\n};\nQualitiesCard.propTypes = {\n    data: PropTypes.array\n};\n\nexport default QualitiesCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst MeetingsCard = ({ value }) => {\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\n                <h5 className=\"card-title\">\n                    <span>Completed meetings</span>\n                </h5>\n\n                <h1 className=\"display-1\">{value}</h1>\n            </div>\n        </div>\n    );\n};\nMeetingsCard.propTypes = {\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\n\nexport default MeetingsCard;\n","export function displayDate(data) {\n    const date = new Date(parseInt(data));\n    const dateNow = new Date();\n    const yearDif = dateNow.getFullYear() - date.getFullYear();\n    if (yearDif === 0) {\n        const dayDif = dateNow.getDay() - date.getDay();\n        if (dayDif === 0) {\n            const hourDif = dateNow.getHours() - date.getHours();\n            if (hourDif === 0) {\n                const minutesDif = dateNow.getMinutes() - date.getMinutes();\n\n                if (minutesDif >= 0 && minutesDif < 5) return \"1 минуту назад\";\n                if (minutesDif >= 5 && minutesDif < 10) return \"5 минут назад\";\n                if (minutesDif >= 10 && minutesDif < 30) {\n                    return \"10 минут назад\";\n                }\n                return \"30 минут назад\";\n            }\n            return `${date.getHours()}:${date.getMinutes()}`;\n        }\n\n        return `${date.getDay()} ${date.toLocaleString(\"default\", {\n            month: \"long\"\n        })}`;\n    }\n    return (\n        date.getFullYear() + \".\" + (date.getMonth() + 1) + \"_\" + date.getDate()\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { displayDate } from \"../../../utils/displayDate\";\nimport { useSelector } from \"react-redux\";\nimport { getCurrentUserId, getUserById } from \"../../../store/users\";\nconst Comment = ({\n    content,\n    created_at: created,\n    _id: id,\n    userId,\n    onRemove\n}) => {\n    const currentUserId = useSelector(getCurrentUserId());\n    const user = useSelector(getUserById(userId));\n\n    return (\n        <>\n            <div className=\"bg-light card-body  mb-3\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"d-flex flex-start \">\n                            <img\n                                src={user.image}\n                                className=\"rounded-circle shadow-1-strong me-3\"\n                                alt=\"avatar\"\n                                width=\"65\"\n                                height=\"65\"\n                            />\n                            <div className=\"flex-grow-1 flex-shrink-1\">\n                                <div className=\"mb-4\">\n                                    <div className=\"d-flex justify-content-between align-items-center\">\n                                        <p className=\"mb-1 \">\n                                            {user && user.name}{\" \"}\n                                            <span className=\"small\">\n                                                - {displayDate(created)}\n                                            </span>\n                                        </p>\n                                        {currentUserId === userId && (\n                                            <button\n                                                className=\"btn btn-sm text-primary d-flex align-items-center\"\n                                                onClick={() => onRemove(id)}\n                                            >\n                                                <i className=\"bi bi-x-lg\"></i>\n                                            </button>\n                                        )}\n                                    </div>\n                                    <p className=\"small mb-0\">{content}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\nComment.propTypes = {\n    content: PropTypes.string,\n    edited_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    created_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    userId: PropTypes.string,\n    onRemove: PropTypes.func,\n    _id: PropTypes.string\n};\n\nexport default Comment;\n","import React from \"react\";\nimport Comment from \"./comment\";\nimport PropTypes from \"prop-types\";\nconst CommentsList = ({ comments, onRemove }) => {\n    return comments.map((comment) => {\n        return <Comment key={comment._id} {...comment} onRemove={onRemove} />;\n    });\n};\nCommentsList.propTypes = {\n    comment: PropTypes.array,\n    onRemove: PropTypes.func\n};\n\nexport default CommentsList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TextAreaField = ({ label, name, value, onChange, error }) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\n    };\n\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name}> {label}</label>\n            <div className=\"input-group has-validation\">\n                <textarea\n                    id={name}\n                    name={name}\n                    value={value}\n                    onChange={handleChange}\n                    className={getInputClasses()}\n                />\n\n                {error && <div className=\"invalid-feedback \">{error}</div>}\n            </div>\n        </div>\n    );\n};\nTextAreaField.defaultProps = {\n    type: \"text\"\n};\nTextAreaField.propTypes = {\n    label: PropTypes.string,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string\n};\n\nexport default TextAreaField;\n","import React, { useState } from \"react\";\nimport TextAreaField from \"../form/textAreaField\";\nimport { validator } from \"../../../utils/validator\";\nimport PropTypes from \"prop-types\";\n\nconst AddCommentForm = ({ onSubmit }) => {\n    const [data, setData] = useState({});\n    const [errors, setErrors] = useState({});\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfog = {\n        content: {\n            isRequired: {\n                message: \"Сообщение не может быть пустым\"\n            }\n        }\n    };\n\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const clearForm = () => {\n        setData({});\n        setErrors({});\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        onSubmit(data);\n        clearForm();\n    };\n    return (\n        <div>\n            <h2>New comment</h2>\n            <form onSubmit={handleSubmit}>\n                <TextAreaField\n                    value={data.content || \"\"}\n                    onChange={handleChange}\n                    name=\"content\"\n                    label=\"Сообщение\"\n                    error={errors.content}\n                />\n                <div className=\"d-flex justify-content-end\">\n                    <button className=\"btn btn-primary\">Опубликовать</button>\n                </div>\n            </form>\n        </div>\n    );\n};\nAddCommentForm.propTypes = {\n    onSubmit: PropTypes.func\n};\n\nexport default AddCommentForm;\n","import CommentsList from \"./commentsList\";\nimport AddCommentForm from \"./addCommentForm\";\nexport default CommentsList;\nexport { AddCommentForm };\n","import httpService from \"./http.service\";\nconst commentEndpoint = \"comment/\";\n\nconst commentService = {\n    createComment: async (payload) => {\n        const { data } = await httpService.put(\n            commentEndpoint + payload._id,\n            payload\n        );\n        return data;\n    },\n    getComments: async (pageId) => {\n        const { data } = await httpService.get(commentEndpoint, {\n            params: {\n                orderBy: '\"pageId\"',\n                equalTo: `\"${pageId}\"`\n            }\n        });\n        return data;\n    },\n    removeComment: async (commentId) => {\n        const { data } = await httpService.delete(commentEndpoint + commentId);\n        return data;\n    }\n};\nexport default commentService;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { nanoid } from \"nanoid\";\r\nimport commentService from \"../services/comment.service\";\r\n\r\nconst commentsSlice = createSlice({\r\n    name: \"comments\",\r\n    initialState: {\r\n        entities: null,\r\n        isLoading: true,\r\n        error: null\r\n    },\r\n    reducers: {\r\n        commentsRequested(state) {\r\n            state.isLoading = true;\r\n        },\r\n        commentsReceved(state, action) {\r\n            state.entities = action.payload;\r\n            state.isLoading = false;\r\n        },\r\n        commentsRequestedField(state, action) {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        },\r\n        commentsCreateRequested(state) {\r\n            state.isLoading = true;\r\n        },\r\n        commentsCreated(state, action) {\r\n            state.entities.push(action.payload);\r\n            state.isLoading = false;\r\n        },\r\n        commentsCreateField(state, action) {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        },\r\n        commentsRemoveRequested(state) {\r\n            state.isLoading = true;\r\n        },\r\n        commentsRemoved(state, action) {\r\n            state.entities = state.entities.filter(\r\n                (c) => c._id !== action.payload\r\n            );\r\n            state.isLoading = false;\r\n        },\r\n        commentsRemoveRequestedField(state, action) {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\nconst { actions, reducer: commentsReducer } = commentsSlice;\r\nconst {\r\n    commentsRequested,\r\n    commentsReceved,\r\n    commentsRequestedField,\r\n    commentsCreateRequested,\r\n    commentsCreated,\r\n    commentsCreateField,\r\n    commentsRemoveRequested,\r\n    commentsRemoved,\r\n    commentsRemoveRequestedField\r\n} = actions;\r\n\r\nexport const loadCommentsList = (userId) => async (dispatch) => {\r\n    dispatch(commentsRequested());\r\n    try {\r\n        const { content } = await commentService.getComments(userId);\r\n        dispatch(commentsReceved(content));\r\n    } catch (error) {\r\n        dispatch(commentsRequestedField(error.message));\r\n    }\r\n};\r\n\r\nexport const createComment =\r\n    (data, userId, currentUserId) => async (dispatch) => {\r\n        dispatch(commentsCreateRequested());\r\n        const comment = {\r\n            ...data,\r\n            pageId: userId,\r\n            created_at: Date.now(),\r\n            _id: nanoid(),\r\n            userId: currentUserId\r\n        };\r\n        try {\r\n            const { content } = await commentService.createComment(comment);\r\n            dispatch(commentsCreated(content));\r\n        } catch (error) {\r\n            dispatch(commentsCreateField(error.message));\r\n        }\r\n    };\r\n\r\nexport const removeComment = (id) => async (dispatch) => {\r\n    dispatch(commentsRemoveRequested());\r\n    try {\r\n        const { content } = await commentService.removeComment(id);\r\n        if (content === null) {\r\n            dispatch(commentsRemoved(id));\r\n        }\r\n    } catch (error) {\r\n        dispatch(commentsRemoveRequestedField(error.message));\r\n    }\r\n};\r\n\r\nexport const getComments = () => (state) => state.comments.entities;\r\nexport const getCommentsLoadingStatus = () => (state) =>\r\n    state.comments.isLoading;\r\n\r\nexport default commentsReducer;\r\n","import { orderBy } from \"lodash\";\nimport React, { useEffect } from \"react\";\nimport CommentsList, { AddCommentForm } from \"../common/comments\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    createComment,\n    getComments,\n    getCommentsLoadingStatus,\n    loadCommentsList,\n    removeComment\n} from \"../../store/comments\";\nimport { useParams } from \"react-router-dom\";\nimport { getCurrentUserId } from \"../../store/users\";\n\nconst Comments = () => {\n    const { userId } = useParams();\n    const dispatch = useDispatch();\n    const currentUserId = useSelector(getCurrentUserId());\n    const isLoading = useSelector(getCommentsLoadingStatus());\n    const comments = useSelector(getComments());\n\n    useEffect(() => {\n        dispatch(loadCommentsList(userId));\n    }, [userId]);\n\n    const handleSubmit = (data) => {\n        dispatch(createComment(data, userId, currentUserId));\n    };\n    const handleRemoveComment = (id) => {\n        dispatch(removeComment(id));\n    };\n    const sortedComments = orderBy(comments, [\"created_at\"], [\"desc\"]);\n    return (\n        <>\n            <div className=\"card mb-2\">\n                <div className=\"card-body \">\n                    <AddCommentForm onSubmit={handleSubmit} />\n                </div>\n            </div>\n            {sortedComments.length > 0 && (\n                <div className=\"card mb-3\">\n                    <div className=\"card-body \">\n                        <h2>Comments</h2>\n                        <hr />\n                        {!isLoading ? (\n                            <CommentsList\n                                comments={sortedComments}\n                                onRemove={handleRemoveComment}\n                            />\n                        ) : (\n                            \"Loading...\"\n                        )}\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default Comments;\n","import UserPage from \"./userPage\";\nexport default UserPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport UserCard from \"../../ui/userCard\";\nimport QualitiesCard from \"../../ui/qualitiesCard\";\nimport MeetingsCard from \"../../ui/meetingsCard\";\nimport Comments from \"../../ui/comments\";\nimport { useSelector } from \"react-redux\";\nimport { getUserById } from \"../../../store/users\";\n\nconst UserPage = ({ userId }) => {\n    const user = useSelector(getUserById(userId));\n    if (user) {\n        return (\n            <>\n                {userId && (\n                    <div className=\"container\">\n                        <div className=\"row gutters-sm\">\n                            <div className=\"col-md-4 mb-3\">\n                                <UserCard user={user} />\n                                <QualitiesCard data={user.qualities} />\n                                <MeetingsCard value={user.completedMeetings} />\n                            </div>\n                            <div className=\"col-md-8\">\n                                <Comments />\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </>\n        );\n    } else {\n        return <h1>Loading</h1>;\n    }\n};\n\nUserPage.propTypes = {\n    userId: PropTypes.string.isRequired\n};\n\nexport default UserPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nconst Pagination = ({ itemsCount, pageSize, onPageChange, currentPage }) => {\n    const pagesCount = Math.ceil(itemsCount / pageSize);\n    const pages = _.range(1, pagesCount + 1);\n\n    if (pagesCount === 1) return null;\n    return (\n        <nav>\n            <ul className=\"pagination\" role=\"button\">\n                {pages.map((page) => (\n                    <li\n                        key={page}\n                        className={\n                            \"page-item \" +\n                            (page === currentPage ? \"active\" : \"\")\n                        }\n                    >\n                        <a\n                            className=\"page-link\"\n                            onClick={() => {\n                                onPageChange(page);\n                            }}\n                        >\n                            {page}\n                        </a>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    );\n};\nPagination.propTypes = {\n    itemsCount: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired,\n    currentPage: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GroupList = ({\n    items,\n    valueProperty,\n    contentProperty,\n    onItemSelect,\n    selectedItem\n}) => {\n    if (!Array.isArray(items)) {\n        return (\n            <ul className=\"list-group\">\n                {Object.keys(items).map((item) => (\n                    <li\n                        key={items[item][valueProperty]}\n                        className={\n                            \"list-group-item\" +\n                            (items[item] === selectedItem ? \" active\" : \"\")\n                        }\n                        style={{ textAlign: \"center\" }}\n                        onClick={() => onItemSelect(items[item])}\n                        role=\"button\"\n                    >\n                        {items[item][contentProperty]}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n    return (\n        <ul className=\"list-group\">\n            {items.map((item) => (\n                <li\n                    key={item[valueProperty]}\n                    className={\n                        \"list-group-item\" +\n                        (item === selectedItem ? \" active\" : \"\")\n                    }\n                    style={{ textAlign: \"center\" }}\n                    onClick={() => onItemSelect(item)}\n                    role=\"button\"\n                >\n                    {item[contentProperty]}\n                </li>\n            ))}\n        </ul>\n    );\n};\nGroupList.defaultProps = {\n    valueProperty: \"_id\",\n    contentProperty: \"name\"\n};\nGroupList.propTypes = {\n    items: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    valueProperty: PropTypes.string.isRequired,\n    contentProperty: PropTypes.string.isRequired,\n    onItemSelect: PropTypes.func,\n    selectedItem: PropTypes.object\n};\n\nexport default GroupList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst SearchStatus = ({ length }) => {\n    const renderPhrase = (number) => {\n        const lastOne = Number(number.toString().slice(-1));\n        if (number > 4 && number < 15) {\n            return \"человек тусанет\";\n        }\n        if (lastOne === 1) return \"человек тусанет\";\n        if ([2, 3, 4].indexOf(lastOne) >= 0) return \"человека тусанут\";\n        return \"человек тусанет\";\n    };\n    return (\n        <h2>\n            <span\n                className={\"badge \" + (length > 0 ? \"bg-primary\" : \"bg-danger\")}\n            >\n                {length > 0\n                    ? `${length + \" \" + renderPhrase(length)}   с тобой сегодня`\n                    : \"Никто с тобой не тусанет\"}\n            </span>\n        </h2>\n    );\n};\nSearchStatus.propTypes = {\n    length: PropTypes.number\n};\n\nexport default SearchStatus;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst BookMark = ({ status, ...rest }) => {\n    return (\n        <span {...rest} role=\"button\">\n            <i className={\"bi bi-bookmark-heart\" + (status ? \"-fill\" : \"\")}></i>\n        </span>\n    );\n};\nBookMark.propTypes = {\n    status: PropTypes.bool\n};\n\nexport default BookMark;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nconst TableBody = ({ data, columns }) => {\n    const renderContent = (item, column) => {\n        if (columns[column].component) {\n            const component = columns[column].component;\n            if (typeof component === \"function\") {\n                return component(item);\n            }\n            return component;\n        }\n        return _.get(item, columns[column].path);\n    };\n    return (\n        <tbody>\n            {data.map((item) => (\n                <tr key={item._id}>\n                    {Object.keys(columns).map((column) => (\n                        <td key={column}>{renderContent(item, column)}</td>\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    );\n};\n\nTableBody.propTypes = {\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.object.isRequired\n};\n\nexport default TableBody;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst TableHeader = ({ onSort, selectedSort, columns }) => {\n    const handleSort = (item) => {\n        if (selectedSort.path === item) {\n            onSort({\n                ...selectedSort,\n                order: selectedSort.order === \"asc\" ? \"desc\" : \"asc\"\n            });\n        } else {\n            onSort({ path: item, order: \"asc\" });\n        }\n    };\n    const rendeSortArrow = (selectedSort, currentPath) => {\n        if (selectedSort.path === currentPath) {\n            if (selectedSort.order === \"asc\") {\n                return <i className=\"bi bi-caret-down-fill\"></i>;\n            } else {\n                return <i className=\"bi bi-caret-up-fill\"></i>;\n            }\n        }\n        return null;\n    };\n\n    return (\n        <thead>\n            <tr>\n                {Object.keys(columns).map((column) => (\n                    <th\n                        key={column}\n                        onClick={\n                            columns[column].path\n                                ? () => handleSort(columns[column].path)\n                                : undefined\n                        }\n                        {...{ role: columns[column].path && \"button\" }}\n                        scope=\"col\"\n                    >\n                        {columns[column].name}{\" \"}\n                        {rendeSortArrow(selectedSort, columns[column].path)}\n                    </th>\n                ))}\n            </tr>\n        </thead>\n    );\n};\nTableHeader.propTypes = {\n    onSort: PropTypes.func.isRequired,\n    selectedSort: PropTypes.object.isRequired,\n    columns: PropTypes.object.isRequired\n};\n\nexport default TableHeader;\n","import Table from \"./table\";\nimport TableBody from \"./tableBody\";\nimport TableHeader from \"./tableHeader\";\n\nexport default Table;\n\nexport { TableBody, TableHeader };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableBody from \"./tableBody\";\nimport TableHeader from \"./tableHeader\";\n\nconst Table = ({ onSort, selectedSort, columns, data, children }) => {\n    return (\n        <table className=\"table\" style={{ textAlign: \"center\" }}>\n            {children || (\n                <>\n                    <TableHeader {...{ onSort, selectedSort, columns }} />\n                    <TableBody {...{ columns, data }} />\n                </>\n            )}\n        </table>\n    );\n};\nTable.propTypes = {\n    onSort: PropTypes.func,\n    selectedSort: PropTypes.object,\n    columns: PropTypes.object,\n    data: PropTypes.array,\n    children: PropTypes.array\n};\n\nexport default Table;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getProfessionById,\n    getProfessionsLoadingStatus,\n    loadProfessionsList\n} from \"../../store/professions\";\n\nconst Profession = ({ id }) => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getProfessionsLoadingStatus());\n    const profession = useSelector(getProfessionById(id));\n\n    useEffect(() => {\n        dispatch(loadProfessionsList());\n    }, []);\n\n    if (!isLoading) {\n        return <p>{profession.name}</p>;\n    } else return \"loading ...\";\n};\nProfession.propTypes = {\n    id: PropTypes.string\n};\nexport default Profession;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport BookMark from \"../common/bookmark\";\nimport Qualities from \"./qualities\";\nimport Table from \"../common/table\";\nimport { Link } from \"react-router-dom\";\nimport Profession from \"./profession\";\n\nconst UserTable = ({ users, onSort, selectedSort, onToggleBookMark }) => {\n    const columns = {\n        name: {\n            path: \"name\",\n            name: \"Имя\",\n            component: (user) => (\n                <Link\n                    to={`/users/${user._id}`}\n                    style={{ textDecoration: \"none\", color: \"blue\" }}\n                >\n                    {user.name}\n                </Link>\n            )\n        },\n        qualities: {\n            name: \"Качества\",\n            component: (user) => <Qualities qualities={user.qualities} />\n        },\n        professions: {\n            name: \"Профессия\",\n            component: (user) => <Profession id={user.profession} />\n        },\n        completedMeetings: {\n            path: \"completedMeetings\",\n            name: \"Встретился, раз\"\n        },\n        rate: { path: \"rate\", name: \"Оценка\" },\n        bookmark: {\n            path: \"bookmark\",\n            name: \"Избранное\",\n            component: (user) => (\n                <BookMark\n                    status={user.bookmark}\n                    onClick={() => onToggleBookMark(user._id)}\n                />\n            )\n        }\n    };\n    return (\n        <Table\n            onSort={onSort}\n            selectedSort={selectedSort}\n            columns={columns}\n            data={users}\n        />\n    );\n};\n\nUserTable.propTypes = {\n    users: PropTypes.array.isRequired,\n    onSort: PropTypes.func.isRequired,\n    selectedSort: PropTypes.object.isRequired,\n    onToggleBookMark: PropTypes.func.isRequired\n};\n\nexport default UserTable;\n","import UsersListPage from \"./usersListPage\";\nexport default UsersListPage;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { paginate } from \"../../../utils/paginate\";\nimport Pagination from \"../../common/pagination\";\nimport GroupList from \"../../common/groupList\";\nimport SearchStatus from \"../../ui/searchStatus\";\nimport UserTable from \"../../ui/usersTable\";\nimport _ from \"lodash\";\nimport { useSelector } from \"react-redux\";\nimport {\n    getProfessions,\n    getProfessionsLoadingStatus\n} from \"../../../store/professions\";\nimport { getCurrentUserId, getUsersList } from \"../../../store/users\";\nconst UsersListPage = () => {\n    const users = useSelector(getUsersList());\n    const currentUserId = useSelector(getCurrentUserId());\n    const [currentPage, setCurrentPage] = useState(1);\n    const professions = useSelector(getProfessions());\n    const isLoading = useSelector(getProfessionsLoadingStatus());\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [selectedProf, setSelectedProf] = useState();\n    const [sortBy, setSortBy] = useState({ path: \"name\", order: \"asc\" });\n    const pageSize = 6;\n\n    const handleToggleBookMark = (id) => {\n        const newArray = users.map((user) => {\n            if (user._id === id) {\n                return { ...user, bookmark: !user.bookmark };\n            }\n            return user;\n        });\n        // setUsers(newArray);\n        console.log(newArray);\n    };\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [selectedProf, searchQuery]);\n\n    const handleProfessionSelect = (item) => {\n        if (searchQuery !== \"\") setSearchQuery(\"\");\n        setSelectedProf(item);\n    };\n    const handleSearchQuery = ({ target }) => {\n        setSelectedProf(undefined);\n        setSearchQuery(target.value);\n    };\n\n    const handlePageChange = (pageIndex) => {\n        setCurrentPage(pageIndex);\n    };\n    const handleSort = (item) => {\n        setSortBy(item);\n    };\n\n    function filterUsers(data) {\n        const filteredUsers = searchQuery\n            ? data.filter(\n                  (user) =>\n                      user.name\n                          .toLowerCase()\n                          .indexOf(searchQuery.toLowerCase()) !== -1\n              )\n            : selectedProf\n            ? data.filter(\n                  (user) =>\n                      JSON.stringify(user.profession) ===\n                      JSON.stringify(selectedProf._id)\n              )\n            : data;\n        return filteredUsers.filter((u) => u._id !== currentUserId);\n    }\n\n    const filteredUsers = filterUsers(users);\n    const count = filteredUsers.length;\n    const sortedUsers = _.orderBy(filteredUsers, [sortBy.path], [sortBy.order]);\n    const usersCrop = paginate(sortedUsers, currentPage, pageSize);\n    const clearFilter = () => {\n        setSelectedProf();\n    };\n\n    return (\n        <div className=\"d-flex\">\n            {professions && !isLoading && (\n                <div className=\"d-flex flex-column flex-shrink-0 p-3\">\n                    <GroupList\n                        selectedItem={selectedProf}\n                        items={professions}\n                        onItemSelect={handleProfessionSelect}\n                    />\n                    <button\n                        className=\"btn btn-secondary mt-2\"\n                        onClick={clearFilter}\n                    >\n                        Очиститть\n                    </button>\n                </div>\n            )}\n            <div className=\"d-flex flex-column mt-3\">\n                <SearchStatus length={count} />\n                <input\n                    type=\"text\"\n                    name=\"searchQuery\"\n                    placeholder=\"Search...\"\n                    onChange={handleSearchQuery}\n                    value={searchQuery}\n                />\n                {count > 0 && (\n                    <UserTable\n                        users={usersCrop}\n                        onSort={handleSort}\n                        selectedSort={sortBy}\n                        onToggleBookMark={handleToggleBookMark}\n                    />\n                )}\n                <div className=\"d-flex justify-content-center\">\n                    <Pagination\n                        itemsCount={count}\n                        pageSize={pageSize}\n                        currentPage={currentPage}\n                        onPageChange={handlePageChange}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nUsersListPage.propTypes = {\n    users: PropTypes.array\n};\n\nexport default UsersListPage;\n","import _ from \"lodash\";\n\nexport function paginate(items, pageNumber, pageSize) {\n    const startIndex = (pageNumber - 1) * pageSize;\n    return _(items).slice(startIndex).take(pageSize).value();\n}\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getDataStatus, loadUsersList } from \"../../../store/users\";\r\n\r\nconst UsersLoader = ({ children }) => {\r\n    const dispatch = useDispatch();\r\n    const dataStatus = useSelector(getDataStatus());\r\n\r\n    useEffect(() => {\r\n        if (!dataStatus) dispatch(loadUsersList());\r\n    }, []);\r\n    if (!dataStatus) return \"Loading...\";\r\n\r\n    return children;\r\n};\r\n\r\nUsersLoader.propTypes = {\r\n    children: PropTypes.oneOfType(\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    )\r\n};\r\nexport default UsersLoader;\r\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport EditUserPage from \"../components/page/editUserPage\";\nimport UserPage from \"../components/page/userPage\";\nimport UsersListPage from \"../components/page/usersListPage\";\nimport UsersLoader from \"../components/ui/hoc/usersLoader\";\nimport { getCurrentUserId } from \"../store/users\";\nconst Users = () => {\n    const params = useParams();\n    const { userId, edit } = params;\n    const currentUserId = useSelector(getCurrentUserId());\n\n    return (\n        <UsersLoader>\n            {userId ? (\n                edit ? (\n                    userId === currentUserId ? (\n                        <EditUserPage />\n                    ) : (\n                        <Redirect to={`/users/${currentUserId}/edit`} />\n                    )\n                ) : (\n                    <UserPage userId={userId} />\n                )\n            ) : (\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-10 offset-md-1\">\n                            <UsersListPage />\n                        </div>\n                    </div>\n                </div>\n            )}\n        </UsersLoader>\n    );\n};\n\nexport default Users;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CheckBoxField = ({ name, value, onChange, children, error }) => {\n    const handleChange = () => {\n        onChange({ name: name, value: !value });\n    };\n    const getInputClasses = () => {\n        return \"form-check-input\" + (error ? \" is-invalid\" : \"\");\n    };\n    return (\n        <div className=\"form-check mb-4\">\n            <input\n                className={getInputClasses()}\n                type=\"checkbox\"\n                value=\"\"\n                id={name}\n                onChange={handleChange}\n                checked={value}\n            />\n            <label className=\"form-check-label \" htmlFor={name}>\n                {children}\n            </label>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\nCheckBoxField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.bool,\n    onChange: PropTypes.func,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]),\n    error: PropTypes.string\n};\n\nexport default CheckBoxField;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAuthErrors, login } from \"../../store/users\";\n\nconst LoginForm = () => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n        stayOn: false\n    });\n    const loginError = useSelector(getAuthErrors());\n    const [errors, setErrors] = useState({});\n\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Пароль обязателкн для заполнения\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const isValid = validate();\n        if (!isValid) return;\n        const redirect = history.location.state\n            ? history.location.state.from.pathname\n            : \"/\";\n        dispatch(login({ payload: data, redirect }));\n    };\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n            />\n            <TextField\n                label=\"Пароль\"\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                error={errors.password}\n            />\n            <CheckBoxField\n                value={data.stayOn}\n                onChange={handleChange}\n                name=\"stayOn\"\n            >\n                Оставаться в системе\n            </CheckBoxField>\n            {loginError && <p className=\"text-danger\">{loginError}</p>}\n            <button\n                type=\"submit\"\n                disabled={!isValid}\n                className=\"btn btn-primary w-100 mx-auto\"\n            >\n                Submit\n            </button>\n        </form>\n    );\n};\n\nexport default LoginForm;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport SelectField from \"../common/form/selectField\";\nimport RadioField from \"../common/form/radio.Field\";\nimport MultiSelectField from \"../common/form/multiSelectField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getQualities } from \"../../store/qualities\";\nimport { getProfessions } from \"../../store/professions\";\nimport { signUp } from \"../../store/users\";\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n        profession: \"\",\n        sex: \"male\",\n        name: \"\",\n        qualities: [],\n        licence: false\n    });\n    const qualities = useSelector(getQualities());\n    const qualitiesList = qualities.map((q) => ({\n        label: q.name,\n        value: q._id\n    }));\n    const professions = useSelector(getProfessions());\n    const professionList = professions.map((p) => ({\n        label: p.name,\n        value: p._id\n    }));\n    const [errors, setErrors] = useState({});\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n        name: {\n            isRequired: {\n                message: \"Имя обязательно для заполнения\"\n            },\n            min: {\n                message: \"Имя должно состаять миниму из 3 символов\",\n                value: 3\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Пароль обязательна для заполнения\"\n            },\n            isCapitalSymbol: {\n                message: \"Пароль должен содержать хотя бы одну заглавную букву\"\n            },\n            isContainDigit: {\n                message: \"Пароль должен содержать хотя бы одно число\"\n            },\n            min: {\n                message: \"Пароль должен состаять миниму из 8 символов\",\n                value: 8\n            }\n        },\n        profession: {\n            isRequired: {\n                message: \"Обязательно выберите вашу профессию\"\n            }\n        },\n        licence: {\n            isRequired: {\n                message:\n                    \"Вы не можете использовать наш сервис без подтреврждения лицензионного соглашения\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const newData = {\n            ...data,\n            qualities: data.qualities.map((q) => q.value)\n        };\n        dispatch(signUp(newData));\n    };\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n            />\n            <TextField\n                label=\"Имя\"\n                name=\"name\"\n                value={data.name}\n                onChange={handleChange}\n                error={errors.name}\n            />\n            <TextField\n                label=\"Пароль\"\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                error={errors.password}\n            />\n            <SelectField\n                label=\"Выбери свою профессию\"\n                defaultOption=\"Choose...\"\n                name=\"profession\"\n                options={professionList}\n                onChange={handleChange}\n                value={data.profession}\n                error={errors.profession}\n            />\n            <RadioField\n                options={[\n                    { name: \"Male\", value: \"male\" },\n                    { name: \"Female\", value: \"female\" },\n                    { name: \"Other\", value: \"other\" }\n                ]}\n                value={data.sex}\n                name=\"sex\"\n                onChange={handleChange}\n                label=\"Выберите ваш пол\"\n            />\n            <MultiSelectField\n                options={qualitiesList}\n                onChange={handleChange}\n                name=\"qualities\"\n                label=\"Выберите ваши качесвта\"\n            />\n            <CheckBoxField\n                value={data.licence}\n                onChange={handleChange}\n                name=\"licence\"\n                error={errors.licence}\n            >\n                Подтвердить <a>лицензионное соглашение</a>\n            </CheckBoxField>\n            <button\n                type=\"submit\"\n                disabled={!isValid}\n                className=\"btn btn-primary w-100 mx-auto\"\n            >\n                Submit\n            </button>\n        </form>\n    );\n};\n\nexport default RegisterForm;\n","import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport LoginForm from \"../components/ui/loginForm\";\nimport RegisterForm from \"../components/ui/registerForm\";\n\nconst Login = () => {\n    const { type } = useParams();\n    const [formType, setFormType] = useState(\n        type === \"register\" ? type : \"login\"\n    );\n    const toggleFormType = (params) => {\n        setFormType((prevState) =>\n            prevState === \"register\" ? \"login\" : \"register\"\n        );\n    };\n\n    return (\n        <div className=\"container mt-5\">\n            <div className=\"row\">\n                <div\n                    className=\"col-md-6 offset-md-3 shadow p-4\"\n                    style={{ borderRadius: \"10px\" }}\n                >\n                    {formType === \"register\" ? (\n                        <>\n                            <h3 className=\"d-flex justify-content-center mb-4\">\n                                Register\n                            </h3>\n                            <RegisterForm />\n                            <p className=\"mt-2\">\n                                Already have account?{\" \"}\n                                <a role=\"button\" onClick={toggleFormType}>\n                                    {\" \"}\n                                    Sign In\n                                </a>\n                            </p>\n                        </>\n                    ) : (\n                        <>\n                            <h3 className=\"d-flex justify-content-center mb-4\">\n                                Login\n                            </h3>\n                            <LoginForm />\n                            <p className=\"mt-2\">\n                                Dont have account?{\" \"}\n                                <a role=\"button\" onClick={toggleFormType}>\n                                    {\" \"}\n                                    Sign Up\n                                </a>\n                            </p>\n                        </>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default Login;\n","import React from \"react\";\n// import { useMockData } from \"../utils/mockData\";\n\nconst Main = () => {\n    // const { initialize, status, progress, error } = useMockData();\n    // const handleClick = () => {\n    //     initialize();\n    // };\n\n    return (\n        <div className=\"container m-5\">\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-4\">\n                    <h3>Здесь могла бы быть ваша реклама</h3>\n                </div>\n            </div>\n            {/* <h1> Main Page</h1>\n            <h3>Инициализация данных в FireBase</h3>\n            <ul>\n                <li>Status: {status}</li>\n                <li>Progress: {progress}%</li>\n                {error && <li>Error: {error}</li>}\n            </ul>\n            <button className=\"btn btn-primary\" onClick={handleClick}>\n                Инициализировать\n            </button> */}\n        </div>\n    );\n};\n\nexport default Main;\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { getCurrentUserData } from \"../../store/users\";\n\nconst NavProfile = () => {\n    const currentUser = useSelector(getCurrentUserData());\n    const [isOpen, setOpen] = useState();\n    const toggleMenu = () => {\n        setOpen((prev) => !prev);\n    };\n\n    if (!currentUser) return \"Loading...\";\n    return (\n        <div className=\"dropdown\" onClick={toggleMenu}>\n            <div className=\"btn dropdown-toggle d-flex align-items-center\">\n                <div className=\"me-2\">{currentUser.name}</div>\n                <img\n                    src={currentUser.image}\n                    alt=\"\"\n                    height=\"40\"\n                    className=\"img-responsive rounded-circle\"\n                />\n            </div>\n            <div\n                className={\"w-100 dropdown-menu\" + (isOpen ? \" show\" : \"\")}\n                style={{ position: \"absolute\", right: \"-7%\" }}\n            >\n                <Link\n                    to={`/users/${currentUser._id}`}\n                    className=\"dropdown-item\"\n                >\n                    Profile\n                </Link>\n                <Link to=\"/logout\" className=\"dropdown-item\">\n                    Log Out\n                </Link>\n            </div>\n        </div>\n    );\n};\n\nexport default NavProfile;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { getIsLoggedIn } from \"../../store/users\";\nimport NavProfile from \"./navProfile\";\n\nconst NavBar = () => {\n    const isLoggedIn = useSelector(getIsLoggedIn());\n\n    return (\n        <div className=\"navbar bg-light mb-3\">\n            <div className=\"container-fluid\">\n                <ul className=\"nav\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">\n                            Main\n                        </Link>\n                    </li>\n                    {isLoggedIn && (\n                        <li className=\"nav-item\">\n                            <Link\n                                className=\"nav-link \"\n                                aria-current=\"page\"\n                                to=\"/users\"\n                            >\n                                Users\n                            </Link>\n                        </li>\n                    )}\n                </ul>\n                <>\n                    {isLoggedIn ? (\n                        <NavProfile />\n                    ) : (\n                        <Link\n                            className=\"nav-link \"\n                            aria-current=\"page\"\n                            to=\"/login\"\n                        >\n                            Login\n                        </Link>\n                    )}\n                </>\n            </div>\n        </div>\n    );\n};\n\nexport default NavBar;\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getIsLoggedIn } from \"../../store/users\";\r\n\r\nconst ProtectedRoute = ({ component: Component, children, ...rest }) => {\r\n    const isLoggedIn = useSelector(getIsLoggedIn());\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => {\r\n                if (!isLoggedIn) {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: {\r\n                                    from: props.location\r\n                                }\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n                return Component ? <Component {...props} /> : children;\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nProtectedRoute.propTypes = {\r\n    component: PropTypes.func,\r\n    location: PropTypes.object,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n};\r\nexport default ProtectedRoute;\r\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { logOut } from \"../store/users\";\n\nconst LogOut = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(logOut());\n    }, []);\n    return <h1>Loading...</h1>;\n};\n\nexport default LogOut;\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n    getIsLoggedIn,\r\n    getUsersLoadingStatus,\r\n    loadUsersList\r\n} from \"../../../store/users\";\r\nimport { loadQualitiesList } from \"../../../store/qualities\";\r\nimport { loadProfessionsList } from \"../../../store/professions\";\r\n\r\nconst AppLoader = ({ children }) => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector(getIsLoggedIn());\r\n    const usersStatusLoading = useSelector(getUsersLoadingStatus());\r\n\r\n    useEffect(() => {\r\n        dispatch(loadQualitiesList());\r\n        dispatch(loadProfessionsList());\r\n        if (isLoggedIn) {\r\n            dispatch(loadUsersList());\r\n        }\r\n    }, [isLoggedIn]);\r\n    if (usersStatusLoading) return \"Loading..\";\r\n    return children;\r\n};\r\n\r\nAppLoader.propTypes = {\r\n    children: PropTypes.oneOfType(\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    )\r\n};\r\nexport default AppLoader;\r\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Users from \"./layouts/users\";\nimport Login from \"./layouts/login\";\nimport Main from \"./layouts/main\";\nimport NavBar from \"./components/ui/navBar\";\n// import { ToastContainer } from \"react-toastify\";\nimport ProtectedRoute from \"./components/common/protectedRoute\";\nimport LogOut from \"./layouts/logOut\";\nimport AppLoader from \"./components/ui/hoc/appLoader\";\n\nfunction App() {\n    return (\n        <div>\n            <AppLoader>\n                <NavBar />\n                <Switch>\n                    <ProtectedRoute\n                        path=\"/users/:userId?/:edit?\"\n                        component={Users}\n                    />\n                    <Route path=\"/login/:type?\" component={Login} />\n                    <Route path=\"/logOut\" component={LogOut} />\n                    <Route path=\"/\" exact component={Main} />\n                    <Redirect to=\"/\" />\n                </Switch>\n                {/* <ToastContainer /> */}\n            </AppLoader>\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport commentsReducer from \"./comments\";\r\nimport professionsReducer from \"./professions\";\r\nimport qualitiesReducer from \"./qualities\";\r\nimport usersReducer from \"./users\";\r\n\r\nconst rootReducer = combineReducers({\r\n    qualities: qualitiesReducer,\r\n    professions: professionsReducer,\r\n    users: usersReducer,\r\n    comments: commentsReducer\r\n});\r\n\r\nfunction createStore() {\r\n    return configureStore({\r\n        reducer: rootReducer\r\n    });\r\n}\r\n\r\nexport default createStore;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./app/App\";\nimport { Router } from \"react-router-dom\";\nimport createStore from \"./app/store/createStore\";\nimport { Provider } from \"react-redux\";\nimport history from \"./app/utils/history\";\n\nconst store = createStore();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <Router history={history}>\n                <App />\n            </Router>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}